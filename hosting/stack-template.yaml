AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AppName:
    Description: "Name of the application"
    Type: String
    AllowedPattern: "[a-z0-9-]+"
    ConstraintDescription: "must only contain lowercase letters, numbers and hyphens"
  DesiredCount:
    Description: "Desired number of running containers"
    Type: String
    Default: "2"
  DockerImage:
    Description: "Docker image to use (including tag)"
    Type: String
  DbHost:
    Description: "Database server hostname"
    Type: String
  DbName:
    Description: "Name of the database"
    Type: String
  DbUsername:
    Description: "Database username"
    Type: String
  DbPassword:
    Description: "Database password"
    Type: String
    NoEcho: 'true'
  Memory:
    Description: "Max allocated memory for a container"
    Type: Number
    Default: 1000
  MemoryReservation:
    Description: "Runtime memory for a container"
    Type: Number
    Default: 300
  NewrelicLicense:
    Description: "New Relic API License Key"
    Type: String
    Default: 'deadbeef'
  NewrelicAppName:
    Description: "Name of the app on New Relic"
    Type: String
    Default: 'N/A'
  SmtpHost:
    Description: "SMTP server hostname"
    Type: String
  SmtpPort:
    Description: "SMTP port"
    Type: Number
    Default: '25'
  SmtpUsername:
    Description: "SMTP username"
    Type: String
  SmtpPassword:
    Description: "SMTP password"
    Type: String
    NoEcho: 'true'
  SmtpSecurity:
    Description: "SMTP security type"
    Type: String
    AllowedValues:
      - None
      - SSL
      - STARTTLS
  LoginWhitelistIps:
    Description: "A comma-separated list of IP addresses that should be allowed to access the WordPress login page."
    Type: String
    Default: ""
  SiteWhitelistIps:
    Description: "(optional) A comma-separated list of IP addresses to whitelist the entire website."
    Type: String
    Default: ""
  Environment:
    Description: "The environment this application should run in."
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  CustomDomain:
    Description: "(optional) Custom domain name for the app. This will affect SERVER_NAME, WP_HOME and WP_SITEURL."
    Type: String
    Default: ""
  CustomSSLCertificateArn:
    Description: "(optional) SSL Certificate ARN to be used with the custom domain name."
    Type: String
    Default: ""
  SslPolicy:
    Description: "(optional) SSL Cipher Policy http://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html"
    Type: String
    Default: ""
  WpAuthKey:
    Description: "AUTH_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  WpSecureAuthKey:
    Description: "SECURE_AUTH_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  WpLoggedInKey:
    Description: "LOGGED_IN_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  WpNonceKey:
    Description: "NONCE_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  WpAuthSalt:
    Description: "AUTH_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  WpSecureAuthSalt:
    Description: "SECURE_AUTH_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  WpLoggedInSalt:
    Description: "LOGGED_IN_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  WpNonceSalt:
    Description: "NONCE_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  Active:
    Description: "If the service is 'turned on'. Off services will retain data but will not have containers/load balancers."
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  RotateAccessKey:
    Description: "Increment this number to rotate the IAM access key used by yas3fs when accessing S3. Do not decrement this value."
    Type: Number
    Default: 1
  MaintenanceMode:
    Description: "Sets the MAINTENANCE_MODE environment variable on the container. If implemented by the container, setting to 1 will cause a maintenance page to be displayed."
    Type: Number
    Default: 0
  MaintenanceWhitelistIps:
    Description: "Use in conjunction with MaintenanceMode parameter to configure a whitelist of IP addresses which can bypass the maintenance page. Sets the MAINTENANCE_WHITELIST_IPS environment variable on the container."
    Type: String
    Default: ""
Mappings:
  EnvironmentMap:
    development:
      HostedZone: dev.wp.dsd.io.
      Hostname: dev.wp.dsd.io
      ECSCluster: wp-dev
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/006ac123-c8b7-4f47-ac49-2dcbc6c6bd45
      ELBSubnet1: subnet-0378637b
      ELBSubnet2: subnet-c1fbc78b
      ELBSecurityGroup: sg-d86b93b1
      TargetGroupVPC: vpc-f1857398
    staging:
      HostedZone: staging.wp.dsd.io.
      Hostname: staging.wp.dsd.io
      ECSCluster: wp-staging
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/9b35290e-dd85-4a10-b084-956c187ca6cd
      ELBSubnet1: subnet-5d7f6425
      ELBSubnet2: subnet-7ff4c835
      ELBSecurityGroup: sg-986b93f1
      TargetGroupVPC: vpc-38827451
    production:
      HostedZone: prod.wp.dsd.io.
      Hostname: prod.wp.dsd.io
      ECSCluster: wp-production
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/3a60a3f5-a250-42d3-8af0-ae24bfee13eb
      ELBSubnet1: subnet-297f6451
      ELBSubnet2: subnet-29f4c863
      ELBSecurityGroup: sg-d66b93bf
      TargetGroupVPC: vpc-e282748b
Outputs:
  DNSName:
    Description: "DNS name of the service. Use this directly or as a CNAME."
    Value: !If [ IsActive, !Ref DNSRecord, 'None' ]
Conditions:
  SmtpUseSsl: !Equals [ !Ref SmtpSecurity, "SSL" ]
  SmtpUseStarttls: !Equals [ !Ref SmtpSecurity, "STARTTLS" ]
  UseCustomDomain: !Not [ !Equals [ !Ref CustomDomain, "" ] ]
  UseCustomSSLCertificateArn: !Not [ !Equals [ !Ref CustomSSLCertificateArn, "" ] ]
  UseSslPolicy: !Not [ !Equals [ !Ref SslPolicy, "" ] ]
  HasSiteIpWhitelist: !Not [ !Equals [ !Ref SiteWhitelistIps, "" ] ]
  DoesNotHaveSiteIpWhitelist: !Equals [ !Ref SiteWhitelistIps, "" ]
  IsActive: !Or
    - !Equals [ !Ref Active, "true" ]
    - !Equals [ !Ref Environment, "production" ]
Resources:
  ##
  # ECS task & service
  ##
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - StorageUserAccessKey
    Properties:
      ContainerDefinitions:
        - Name: web
          Essential: 'true'
          Image: !Ref DockerImage
          Memory: !Ref Memory
          MemoryReservation: !Ref MemoryReservation
          Privileged: 'true'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web
          Environment:
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref StorageUserAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt StorageUserAccessKey.SecretAccessKey
            - Name: AWS_S3_BUCKET
              Value: !Ref Storage
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: SNS_TOPIC
              Value: !Ref StorageTopic
            - Name: DB_HOST
              Value: !Ref DbHost
            - Name: DB_NAME
              Value: !Ref DbName
            - Name: DB_USER
              Value: !Ref DbUsername
            - Name: DB_PASSWORD
              Value: !Ref DbPassword
            - Name: NEWRELIC_LICENSE
              Value: !Ref NewrelicLicense
            - Name: NEWRELIC_APPNAME
              Value: !Ref NewrelicAppName
            - Name: LB_IP_RANGE
              Value: 10.0.0.0/16
            - Name: LOGIN_WHITELIST_IPS
              Value: !Ref LoginWhitelistIps
            - Name: SITE_WHITELIST_IPS
              Value: !Ref SiteWhitelistIps
            - Name: S3_UPLOADS_BASE_URL
              Value: !Join [ '', [ 'https://s3-', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Storage, '/uploads' ] ]
            - Name: SERVER_NAME
              Value: !If [ UseCustomDomain, !Ref CustomDomain, !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ] ] ] ]
            - Name: SMTP_HOST
              Value: !Ref SmtpHost
            - Name: SMTP_PORT
              Value: !Ref SmtpPort
            - Name: SMTP_USER
              Value: !Ref SmtpUsername
            - Name: SMTP_PASS
              Value: !Ref SmtpPassword
            - Name: SMTP_USE_SSL
              Value: !If [SmtpUseSsl, 'true', !Ref 'AWS::NoValue']
            - Name: SMTP_USE_STARTTLS
              Value: !If [SmtpUseStarttls, 'true', !Ref 'AWS::NoValue']
            - Name: WP_HOME
              Value: !Join [ '', [ 'https://', !If [ UseCustomDomain, !Ref CustomDomain, !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ] ] ] ] ] ]
            - Name: WP_SITEURL
              Value: !Join [ '', [ 'https://', !If [ UseCustomDomain, !Ref CustomDomain, !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ] ] ] ], '/wp' ] ]
            - Name: WP_ENV
              Value: !Ref Environment
            - Name: AUTH_KEY
              Value: !Ref WpAuthKey
            - Name: SECURE_AUTH_KEY
              Value: !Ref WpSecureAuthKey
            - Name: LOGGED_IN_KEY
              Value: !Ref WpLoggedInKey
            - Name: NONCE_KEY
              Value: !Ref WpNonceKey
            - Name: AUTH_SALT
              Value: !Ref WpAuthSalt
            - Name: SECURE_AUTH_SALT
              Value: !Ref WpSecureAuthSalt
            - Name: LOGGED_IN_SALT
              Value: !Ref WpLoggedInSalt
            - Name: NONCE_SALT
              Value: !Ref WpNonceSalt
            - Name: MAINTENANCE_MODE
              Value: !Ref MaintenanceMode
            - Name: MAINTENANCE_WHITELIST_IPS
              Value: !Ref MaintenanceWhitelistIps
      Family: !Ref AWS::StackName
  WebService:
    Condition: IsActive
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - WebTaskDefinition
      - HttpListener
    Properties:
      Cluster: !FindInMap [ EnvironmentMap, !Ref Environment, ECSCluster ]
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - ContainerName: web
          ContainerPort: '80'
          TargetGroupArn: !Ref TargetGroup
      Role: ecsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
  ##
  # Log group
  ##
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  ##
  # Uploads storage
  ##
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "Delete old backup versions after 30 days"
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
  StorageBucketPolicyWhitelisted:
    Type: AWS::S3::BucketPolicy
    Condition: HasSiteIpWhitelist
    Properties:
      Bucket: !Ref Storage
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/uploads/*' ] ]
            Principal: "*"
            Condition:
              IpAddress:
                aws:SourceIp: !Split [ "," , !Ref SiteWhitelistIps ]
  StorageBucketPolicyPublic:
    Type: AWS::S3::BucketPolicy
    Condition: DoesNotHaveSiteIpWhitelist
    Properties:
      Bucket: !Ref Storage
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/uploads/*' ] ]
            Principal: "*"
  StorageTopic:
    Type: AWS::SNS::Topic
  StorageUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - WordPress
      Policies:
        - PolicyName: yas3fs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:RestoreObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage ] ]
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/*' ] ]
              - Action:
                  - sns:ConfirmSubscription
                  - sns:GetTopicAttributes
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                Effect: Allow
                Resource: !Ref StorageTopic
              - Action: sqs:*
                Effect: Allow
                Resource: !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':yas3fs-*' ] ]
  StorageUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: !Ref RotateAccessKey
      UserName: !Ref StorageUser
  ##
  # Load Balancer
  ##
  LoadBalancer:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSecurityGroup ]
      Subnets:
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet1 ]
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet2 ]
  TargetGroup:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Protocol: HTTP
      Port: '80'
      VpcId: !FindInMap [ EnvironmentMap, !Ref Environment, TargetGroupVPC ]
      HealthCheckPath: "/wp/readme.html"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
  HttpListener:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  HttpsListener:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !If [ UseCustomSSLCertificateArn, !Ref CustomSSLCertificateArn, !FindInMap [ EnvironmentMap, !Ref Environment, SSLCertificateArn ] ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      SslPolicy: !If [ UseSslPolicy, !Ref SslPolicy, !Ref "AWS::NoValue" ]
  ##
  # DNS record
  ##
  DNSRecord:
    Condition: IsActive
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneName: !FindInMap [ EnvironmentMap, !Ref Environment, HostedZone ]
      Name: !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ], '.' ] ]
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
