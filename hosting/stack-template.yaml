AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AppName:
    Description: "Name of the application"
    Type: String
    AllowedPattern: "[a-z0-9-]+"
    ConstraintDescription: "must only contain lowercase letters, numbers and hyphens"
  DesiredCount:
    Description: "Desired number of running containers"
    Type: String
    Default: "2"
  DockerImage:
    Description: "Docker image to use (including tag)"
    Type: String
  Memory:
    Description: "Max allocated memory for a container"
    Type: Number
    Default: 1000
  MemoryReservation:
    Description: "Runtime memory for a container"
    Type: Number
    Default: 300
  Environment:
    Description: "The environment this application should run in."
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  CustomDomain:
    Description: "(optional) Custom domain name for the app. This will affect SERVER_NAME, WP_HOME and WP_SITEURL."
    Type: String
    Default: ""
  CustomSSLCertificateArn:
    Description: "(optional) SSL Certificate ARN to be used with the custom domain name."
    Type: String
    Default: ""
  SslPolicy:
    Description: "(optional) SSL Cipher Policy http://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html"
    Type: String
    Default: ""
  Active:
    Description: "If the service is 'turned on'. Off services will retain data but will not have containers/load balancers."
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
Mappings:
  EnvironmentMap:
    development:
      HostedZone: dev.wp.dsd.io.
      Hostname: dev.wp.dsd.io
      ECSCluster: wp-dev
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/006ac123-c8b7-4f47-ac49-2dcbc6c6bd45
      ELBSubnet1: subnet-0378637b
      ELBSubnet2: subnet-c1fbc78b
      ELBSecurityGroup: sg-d86b93b1
      TargetGroupVPC: vpc-f1857398
    staging:
      HostedZone: staging.wp.dsd.io.
      Hostname: staging.wp.dsd.io
      ECSCluster: wp-staging
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/9b35290e-dd85-4a10-b084-956c187ca6cd
      ELBSubnet1: subnet-5d7f6425
      ELBSubnet2: subnet-7ff4c835
      ELBSecurityGroup: sg-986b93f1
      TargetGroupVPC: vpc-38827451
    production:
      HostedZone: prod.wp.dsd.io.
      Hostname: prod.wp.dsd.io
      ECSCluster: wp-production
      SSLCertificateArn:  arn:aws:acm:eu-west-2:613903586696:certificate/b4ab3e48-efbe-46c2-a77c-f52f0e83e4e8
      ELBSubnet1: subnet-297f6451
      ELBSubnet2: subnet-29f4c863
      ELBSecurityGroup: sg-d66b93bf
      TargetGroupVPC: vpc-e282748b
Outputs:
  DNSName:
    Description: "DNS name of the service. Use this directly or as a CNAME."
    Value: !If [ IsActive, !Ref DNSRecord, 'None' ]
Conditions:
  UseCustomDomain: !Not [ !Equals [ !Ref CustomDomain, "" ] ]
  UseCustomSSLCertificateArn: !Not [ !Equals [ !Ref CustomSSLCertificateArn, "" ] ]
  UseSslPolicy: !Not [ !Equals [ !Ref SslPolicy, "" ] ]
  IsActive: !Or
    - !Equals [ !Ref Active, "true" ]
    - !Equals [ !Ref Environment, "production" ]
Resources:
  ##
  # ECS task & service
  ##
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: web
          Essential: 'true'
          Image: !Ref DockerImage
          Memory: !Ref Memory
          MemoryReservation: !Ref MemoryReservation
          Privileged: 'true'
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: LB_IP_RANGE
              Value: 10.0.0.0/16
            - Name: SERVER_NAME
              Value: !If [ UseCustomDomain, !Ref CustomDomain, !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ] ] ] ]
      Family: !Ref AWS::StackName
  WebService:
    Condition: IsActive
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - WebTaskDefinition
      - HttpListener
    Properties:
      Cluster: !FindInMap [ EnvironmentMap, !Ref Environment, ECSCluster ]
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - ContainerName: web
          ContainerPort: '8080'
          TargetGroupArn: !Ref TargetGroup
      Role: ecsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
  ##
  # Log group
  ##
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  ##
  # Load Balancer
  ##
  LoadBalancer:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSecurityGroup ]
      Subnets:
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet1 ]
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet2 ]
  TargetGroup:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Protocol: HTTP
      Port: '8080'
      VpcId: !FindInMap [ EnvironmentMap, !Ref Environment, TargetGroupVPC ]
      HealthCheckPath: "/index.html"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
  HttpListener:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  HttpsListener:
    Condition: IsActive
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !If [ UseCustomSSLCertificateArn, !Ref CustomSSLCertificateArn, !FindInMap [ EnvironmentMap, !Ref Environment, SSLCertificateArn ] ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      SslPolicy: !If [ UseSslPolicy, !Ref SslPolicy, !Ref "AWS::NoValue" ]
  ##
  # DNS record
  ##
  DNSRecord:
    Condition: IsActive
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneName: !FindInMap [ EnvironmentMap, !Ref Environment, HostedZone ]
      Name: !Join [ '', [ !Ref AppName, '.', !FindInMap [ EnvironmentMap, !Ref Environment, Hostname ], '.' ] ]
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
